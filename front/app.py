import streamlit as st
import pandas as pd
import requests
import io
import base64
from datetime import datetime
import matplotlib.pyplot as plt
from docx import Document
from io import BytesIO


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://streamlitfastapi-app.onrender.com"

st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
    page_icon="üìä",
    layout="wide"
)

st.title("–ê–Ω–∞–ª–∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
st.markdown("""
–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ x, y, z –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞.
""")

def display_statistics(stats: dict):
    st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–°—Ä–µ–¥–Ω–µ–µ X", f"{stats['mean']['x']:.2f}")
        st.metric("–ú–µ–¥–∏–∞–Ω–∞ X", f"{stats['median']['x']:.2f}")
    
    with col2:
        st.metric("–°—Ä–µ–¥–Ω–µ–µ Y", f"{stats['mean']['y']:.2f}")
        st.metric("–ú–µ–¥–∏–∞–Ω–∞ Y", f"{stats['median']['y']:.2f}")
    
    with col3:
        st.metric("–°—Ä–µ–¥–Ω–µ–µ Z", f"{stats['mean']['z']:.2f}")
        st.metric("–ú–µ–¥–∏–∞–Ω–∞ Z", f"{stats['median']['z']:.2f}")
    
    st.write("")
    col4, col5, col6 = st.columns(3)
    
    with col4:
        st.metric("–ú–∏–Ω/–ú–∞–∫—Å X", f"{stats['min']['x']:.2f} / {stats['max']['x']:.2f}")
    
    with col5:
        st.metric("–ú–∏–Ω/–ú–∞–∫—Å Y", f"{stats['min']['y']:.2f} / {stats['max']['y']:.2f}")
    
    with col6:
        st.metric("–ú–∏–Ω/–ú–∞–∫—Å Z", f"{stats['min']['z']:.2f} / {stats['max']['z']:.2f}")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª", type=['xlsx', 'xls', 'csv'])

if uploaded_file is not None:
    try:
        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
        df = pd.read_excel(uploaded_file)
        st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(df.head())
        
        if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ..."):
                files = {'file': ('coordinates.xlsx', uploaded_file.getvalue())}
                
                try:
                    response = requests.post(f"{BACKEND_URL}/analyze", files=files)
                    response.raise_for_status()
                    result = response.json()
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    display_statistics(result['statistics'])
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
                    st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
                    plots_bytes = base64.b64decode(result['plots_base64'])
                    st.image(plots_bytes)
                    
                    # –û—Ç—á–µ—Ç –≤ Markdown
                    st.subheader("–û—Ç—á–µ—Ç –≤ Markdown")
                    st.markdown(result['markdown_report'])
                    
                    # –ö–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    st.subheader("–°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã")
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        # Word –æ—Ç—á–µ—Ç
                        word_bytes = base64.b64decode(result['word_report'])
                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å Word –æ—Ç—á–µ—Ç",
                            data=word_bytes,
                            file_name=f"coordinates_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx",
                            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                        )
                    
                    with col2:
                        # Markdown –æ—Ç—á–µ—Ç
                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å Markdown –æ—Ç—á–µ—Ç",
                            data=result['markdown_report'],
                            file_name=f"coordinates_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
                            mime="text/markdown"
                        )
                    
                except requests.exceptions.RequestException as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {str(e)}")
                except Exception as e:
                    st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

st.markdown("---")
st.markdown("""
<div style='text-align: center'>
    <p>–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç | –°–æ–∑–¥–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Streamlit –∏ FastAPI</p>
</div>
""", unsafe_allow_html=True)